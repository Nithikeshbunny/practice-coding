#include <stdio.h>
#define MAX_SIZE 10  // Maximum size for matrices

// Function to input matrix elements
void inputMatrix(int matrix[][MAX_SIZE], int rows, int cols) {
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("Element [%d][%d]: ", i, j);
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Function to multiply two matrices
void multiplyMatrices(int A[][MAX_SIZE], int B[][MAX_SIZE], int C[][MAX_SIZE], int rowsA, int colsA, int rowsB, int colsB) {
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            C[i][j] = 0;  // Initialize result element to 0
            for (int k = 0; k < colsA; k++) {  // colsA should equal rowsB
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function to display a matrix
void displayMatrix(int matrix[][MAX_SIZE], int rows, int cols) {
    printf("Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", matrix[i][j]);  // Print element with tab
        }
        printf("\n");  // New line after each row
    }
}

int main() {
    int A[MAX_SIZE][MAX_SIZE];  // First matrix
    int B[MAX_SIZE][MAX_SIZE];  // Second matrix
    int C[MAX_SIZE][MAX_SIZE];  // Result matrix
    int rowsA, colsA, rowsB, colsB;

    // Input for first matrix
    printf("Enter rows and columns for Matrix A (up to %d): ", MAX_SIZE);
    scanf("%d %d", &rowsA, &colsA);
    
    if (rowsA > MAX_SIZE || colsA > MAX_SIZE) {
        printf("Error: Matrix size exceeds limit!\n");
        return 1;  // Exit with error
    }
    
    inputMatrix(A, rowsA, colsA);

    // Input for second matrix
    printf("Enter rows and columns for Matrix B (up to %d): ", MAX_SIZE);
    scanf("%d %d", &rowsB, &colsB);
    
    if (rowsB > MAX_SIZE || colsB > MAX_SIZE) {
        printf("Error: Matrix size exceeds limit!\n");
        return 1;  // Exit with error
    }
    
    // Check for compatibility
    if (colsA != rowsB) {
        printf("Error: Matrices are not compatible for multiplication. Columns of A must equal rows of B.\n");
        return 1;  // Exit with error
    }
    
    inputMatrix(B, rowsB, colsB);

    // Perform multiplication
    multiplyMatrices(A, B, C, rowsA, colsA, rowsB, colsB);

    // Display results
    printf("\nMatrix A:\n");
    displayMatrix(A, rowsA, colsA);
    
    printf("\nMatrix B:\n");
    displayMatrix(B, rowsB, colsB);
    
    printf("\nResult Matrix C (A * B):\n");
    displayMatrix(C, rowsA, colsB);  // Result matrix size is rowsA x colsB

    return 0;
}

